# -*- coding: utf-8 -*-
"""
Created on Fri May 12 21:15:42 2023

@author: tanoh
"""
import os
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np
import missingno
import streamlit as st

from sklearn.preprocessing import MinMaxScaler
from sklearn.model_selection import train_test_split
st.set_option('deprecation.showPyplotGlobalUse', False)

st.title("Preprocessing")


directory = 'Benign'
t = []
for filename in os.listdir(directory):
    f=os.path.join(directory, filename)
    if os.path.isfile(f):
        d = pd.read_csv(f, delimiter=",")
        t.append(d)

dataset = pd.concat(t, sort=False)

#Pretraitement
#Categorisation des malwares
dataset.iloc[:, -1].replace({'RANSOMWARE_SVPENG':'Ransomware',
                            'BENIGN':'Benign',
                            'RANSOMWARE_WANNALOCKER':'Ransomware'}, inplace=True)


#Conversion de Label en variable numerique
from sklearn.preprocessing import LabelEncoder
Encoder =  LabelEncoder()
Encoder.fit(dataset.iloc[:, -1].astype(str))
dataset.iloc[:, -1] = Encoder.transform(dataset.iloc[:, -1].astype(str))

features = dataset.drop(dataset.iloc[:, [0, 1, 3, 6, 84]], axis=1)
target = dataset.iloc[:, -1]

#Normalisation
scaler = MinMaxScaler()
features_norm = scaler.fit_transform(features)
features_norm_df = pd.DataFrame(features_norm, columns=features.columns)

#Seaparation de nos donnees
X = features_norm_df
y = target
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=15)

model_choice = st.sidebar.selectbox("Choississez une action", ("Dataset", "Descriptions", "Resumer", "Matrice de correlation", "Diagramme"), key=1)

if model_choice == "Dataset":
    st.write(dataset)

if model_choice == "Descriptions":
    st.write(dataset.describe())
    
if model_choice == "Resumer":
    st.write("-"*100)
    st.write("Ensemble des variables : ")
    st.write(dataset.columns)
    st.write("-"*100)
    st.write("Types de donnees : ")
    st.write(dataset.dtypes)
    st.write("-------------Nombres--------------")
    st.write(dataset.dtypes.value_counts())
    st.write("-"*100)
    st.write("Tailles du dataset : ")
    st.write(dataset.shape)
    st.write("-"*100)
    st.write("Ensemble des valeurs nulles : ")
    st.write(dataset.isnull().sum())
    st.write("-"*100)

if model_choice == "Matrice de correlation":
    plt.figure(figsize=(70, 35))
    sns.heatmap(features.corr(), annot=True)
    plt.show()
    st.pyplot()
    
if model_choice == "Diagramme":
    (dataset.iloc[:, -1].value_counts()).plot(kind='pie')
    plt.legend()
    plt.show()
    st.pyplot()
    (dataset.iloc[:, -1].value_counts()).plot(kind='bar')
    plt.legend()
    plt.show()
    st.pyplot()
